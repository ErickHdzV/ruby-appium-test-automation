#!/usr/bin/env ruby

require_relative "test_reporter"
require "json"

# Script to generate reports from existing data
class ReportGenerator
  def self.generate_sample_report
    puts "Generating sample report..."
    
    reporter = TestReporter.new
    
    # Simulate some test data
    reporter.log_step("Verify app", "PASS", "Mercado Libre installed correctly")
    reporter.log_step("Start driver", "PASS", "Appium driver started")
    reporter.log_step("Open application", "PASS", "App started correctly")
    reporter.log_step("Open search", "PASS", "Search field activated")
    reporter.log_step("Execute search", "PASS", "Search executed, results obtained")
    reporter.log_step("Open filter menu", "PASS", "Options menu opened")
    reporter.log_step("Condition filter", "PASS", "'New' filter applied")
    reporter.log_step("Sorting", "PASS", "Sorted by highest price")
    reporter.log_step("Extract products", "PASS", "5 products extracted")
    
    # Sample products
    products = [
      { numero: 1, nombre: "PlayStation 5 Console", precio: "$499.99" },
      { numero: 2, nombre: "PlayStation 5 Digital Edition", precio: "$399.99" },
      { numero: 3, nombre: "PlayStation 5 Bundle", precio: "$699.99" },
      { numero: 4, nombre: "PlayStation 5 + Spider-Man", precio: "$559.99" },
      { numero: 5, nombre: "PlayStation 5 Pro", precio: "$799.99" }
    ]
    
    reporter.log_products(products)
    
    # Sample screenshots
    reporter.log_screenshot("01_pagina_principal", "screenshots/01_pagina_principal.png")
    reporter.log_screenshot("02_buscador", "screenshots/02_buscador.png")
    reporter.log_screenshot("03_resultados_sin_filtrar", "screenshots/03_resultados_sin_filtrar.png")
    
    reporter.generate_reports
    puts "‚úÖ Sample reports generated in: reports/"
  end
  
  def self.list_available_reports
    reports_dir = File.join(__dir__, "reports")
    return unless Dir.exist?(reports_dir)
    
    puts "üìä AVAILABLE REPORTS:"
    puts "=" * 50
    
    json_files = Dir.glob(File.join(reports_dir, "test_report_*.json")).sort.reverse
    html_files = Dir.glob(File.join(reports_dir, "test_report_*.html")).sort.reverse
    txt_files = Dir.glob(File.join(reports_dir, "test_report_*.txt")).sort.reverse
    
    if json_files.empty?
      puts "No reports found."
      puts "Run tests to generate reports."
      return
    end
    
    puts "JSON Reports:"
    json_files.each_with_index do |file, index|
      timestamp = File.basename(file, ".json").sub("test_report_", "")
      formatted_time = DateTime.strptime(timestamp, "%Y%m%d_%H%M%S").strftime("%d/%m/%Y %H:%M:%S")
      puts "  #{index + 1}. #{formatted_time} - #{file}"
    end
    
    puts "\nHTML Reports:"
    html_files.each_with_index do |file, index|
      timestamp = File.basename(file, ".html").sub("test_report_", "")
      formatted_time = DateTime.strptime(timestamp, "%Y%m%d_%H%M%S").strftime("%d/%m/%Y %H:%M:%S")
      puts "  #{index + 1}. #{formatted_time} - #{file}"
    end
    
    puts "\nTXT Reports:"
    txt_files.each_with_index do |file, index|
      timestamp = File.basename(file, ".txt").sub("test_report_", "")
      formatted_time = DateTime.strptime(timestamp, "%Y%m%d_%H%M%S").strftime("%d/%m/%Y %H:%M:%S")
      puts "  #{index + 1}. #{formatted_time} - #{file}"
    end
    
    puts "\nüí° To open an HTML report:"
    puts "   - Navigate to the reports/ folder"
    puts "   - Open the .html file in your browser"
    puts "=" * 50
  end
end

# Main menu
if ARGV.length == 0
  puts "REPORT GENERATOR - Mercado Libre Testing"
  puts "=" * 50
  puts "Available options:"
  puts "  ruby report_generator.rb list    - List existing reports"
  puts "  ruby report_generator.rb sample  - Generate sample report"
  puts "  ruby report_generator.rb help    - Show help"
else
  case ARGV[0].downcase
  when "list", "ls"
    ReportGenerator.list_available_reports
  when "sample", "example"
    ReportGenerator.generate_sample_report
  when "help", "h", "--help"
    puts "HELP - Report Generator"
    puts "=" * 50
    puts "This script allows you to:"
    puts "‚Ä¢ List all reports generated by tests"
    puts "‚Ä¢ Generate a sample report to see the format"
    puts ""
    puts "Reports are automatically generated when you run:"
    puts "  ruby mercado_libre_spec.rb"
    puts ""
    puts "Available report formats:"
    puts "‚Ä¢ JSON - For automatic processing"
    puts "‚Ä¢ HTML - For browser visualization"
    puts "‚Ä¢ TXT - For quick reading in console"
  else
    puts "‚ùå Unrecognized option: #{ARGV[0]}"
    puts "Use: ruby report_generator.rb help"
  end
end